//globally importing the modular scale to make development easier;
@use "sass:map";
@use "sass:selector";
@use "sass:color";
@use "sass:math";
@use "helpers";
@use "modularscale-sass/stylesheets/_modularscale.scss" as *;
@use "maps";
@use "sass:meta";
@use "variables" as global;

@mixin breakpointLoop($breakpoints) {
	// create mobile first rule
	@content ( '' );
	// loop through the rules with media queries going up.
	@each $breakpointLabel, $value in $breakpoints {
		@media screen and (min-width: #{$value}) {
			@content ( global.$colon+$breakpointLabel );
		}
	}
}

@mixin directionModifierLoop($directionsMap, $base) {
	//create the base all unit version first
	@if ($base != "grid" and $directionsMap != null) {
		@content ( '', '' );
	} @else {
		@if (global.$debug) {
			@debug ("grid template found");
		}
	}

	$separatorMarker: "";
	@if ($base != "") {
		$separatorMarker: "-";
	}
	//loop through the variations second
	@each $direction, $propertyDirectionMap in $directionsMap {
		@content ( $separatorMarker+$direction,$propertyDirectionMap );
	}
}
@mixin propertyDirectionMapLoop($propertyDirectionMap, $type) {
	//loop through the variations second
	$propertySeparatorMark: "-";
	@if ($type == "grid") {
		$propertySeparatorMark: "";
	}
	@each $label, $propertyDirection in $propertyDirectionMap {
		@content ( $propertySeparatorMark+$propertyDirection );
	}
}
@function alphaColor($propertyValue, $propertyValueModifier) {
	@return color.change($propertyValue, $alpha: $propertyValueModifier);
}
@function alphaColorCSSVar($unitLabel, $propertyValue, $propertyValueModifier) {
	@return hsla(
		var(--#{$unitLabel}-h),
		var(--#{$unitLabel}-s),
		var(--#{$unitLabel}-l),
		$propertyValueModifier
	);
}
@function shadeColor($propertyValue, $propertyValueModifier) {
	@return color.scale($propertyValue, $lightness: $propertyValueModifier);
}
@function calcLightness($unitLabel, $propertyValueModifier) {
	$lightness: color.lightness(map.get(maps.$theme-palette, $unitLabel));
	$range: 0;
	$shift: 0;
	@if ($propertyValueModifier >= 0) {
		$range: 100 - math.div($lightness, 1%);
	} @else {
		$range: math.div($lightness, 1%);
	}
	$shift: $range * math.div($propertyValueModifier, 100);
	@if (global.$debug) {
		@debug (
			$lightness,
			$range,
			$propertyValueModifier,
			$shift,
			$lightness + $shift
		);
	}
	@return calc(var(--#{$unitLabel}-l) + #{$shift});
}
@function calcLightnessCSSvar($unitLabel, $propertyValueModifier) {
	@if ($propertyValueModifier >= 0) {
		@return calc(
			var(--#{$unitLabel}-l) +
				((100% - var(--#{$unitLabel}-l)) * #{$propertyValueModifier})
		);
	} @else {
		@return calc(
			var(--#{$unitLabel}-l) +
				((var(--#{$unitLabel}-l)) * #{$propertyValueModifier})
		);
	}
}
@function shadeColorCSSVar($unitLabel, $propertyValue, $propertyValueModifier) {
	@return hsl(
		var(--#{$unitLabel}-h),
		var(--#{$unitLabel}-s),
		calcLightnessCSSvar($unitLabel, $propertyValueModifier)
	);
}
@mixin propertyValueLoop($base,$unitList,$unitLoopMode,$cssVar) {
	// basic single layer value loop
	//break the list into individual maps.
	$luminance: "light";
	@each $unit in $unitList {
		$unitMap: map.get(maps.$units, $unit);
		@if ($unitLoopMode == "basic") {
			@each $unitLabel, $propertyValue in $unitMap {
        @if ($cssVar == true) {
          @debug (
            "cssVar"+ $cssVar
          );
          @content ( 
            $unitLabel, 
            helpers.cssVarProperty($base, $unitLabel),
            $luminance );
        } @else {
          @content ( $unitLabel, $propertyValue,$luminance );
        }				
			}
		} @else {
			// complex color loop with value and modifier loop
			@each $unitLabel, $propertyValue in maps.$theme-palette {
				@if ($unitLabel == "black" or $unitLabel == "white") {
					@if ($unitLabel == "black") {
						$luminance: "dark";
					} @else {
						$luminance: "light";
					}
					@content ( $unitLabel,  alphaColorCSSVar($unitLabel,$propertyValue,1),$luminance );
					@each $unitLabelModifier,
						$propertyValueModifier in map.get(maps.$units, opacity)
					{
						@content ( $unitLabel+'-'+$unitLabelModifier, alphaColorCSSVar($unitLabel,$propertyValue,$propertyValueModifier),$luminance);
					}
				} @else {
					@if (
						color.lightness(
								map.get(maps.$theme-palette, $unitLabel)
							) >
							60%
					) {
						$luminance: "dark";
					}
					@content ( $unitLabel,  shadeColorCSSVar($unitLabel,$propertyValue,0),$luminance );
					@each $unitLabelModifier, $propertyValueModifier in $unitMap
					{
						$color: color.adjust(
							map.get(maps.$theme-palette, $unitLabel),
							$lightness: $propertyValueModifier * 100%
						);
						@if (color.lightness($color) < 50%) {
							$luminance: "dark";
						} @else {
							$luminance: "light";
						}
						@content ( $unitLabel+'-'+$unitLabelModifier,shadeColorCSSVar($unitLabel,$propertyValue,$propertyValueModifier),$luminance);
					}
				}
			}
		}
	}
}

@mixin pseudoStateModifierLoop($states) {
	// create base rule with no modifications to state
	@content ( '','', '' );
	$stateClass: "";
	$pseudoLabel: "";
	@each $stateLabelModifier, $pseudoLabelModifier in $states {
		// active is not a true pseudo class but rather a style that reacts to its parent having active
		@if ($pseudoLabelModifier == active) {
			$stateClass: ".active >";
			$pseudoLabel: "";
			@content ($stateClass, $stateLabelModifier + global.$colon  , $pseudoLabel );
			$stateClass: ".active";
			$pseudoLabel: "";
			@content ($stateClass, $stateLabelModifier + global.$colon  , $pseudoLabel );
		} @else {
			$stateClass: "";
			$pseudoLabel: ":" + $pseudoLabelModifier;
			@content ($stateClass, $stateLabelModifier + global.$colon  , $pseudoLabel );
		}
	}
}
@mixin renderCSSFromMap($cssPropertiesMap) {
	@each $type, $map in $cssPropertiesMap {
		$base: map.get($map, name);
		$postCSSSelector: "";
		@if (map.get($map, postCSSSelector)) {
			$postCSSSelector: map.get($map, postCSSSelector);
		}
		@if (global.$debug) {
			@debug ($type, $base);
		}
		$separator: "_";
		@if ($base == "") {
			$separator: "";
		}
		$dir: ();
		@if (map.get($map, direction)) {
			$dir: map.get(maps.$units, map.get($map, direction));
		}
		$bp: ();
		@if (map.get($map, responsive)) {
			$bp: map.get(maps.$units, breakpoints);
		}
		$unitLoopMode: "basic";
		@if (map.has-key($map, loopMode)) {
			$unitLoopMode: map.get($map, loopMode);
		}
    	$cssVar: null;
		@if (map.has-key($map, cssVar)) {
			$cssVar: map.get($map, cssVar);
		}
		$pseudoStates: ();
		@if (map.has-key($map, states)) {
			$pseudoStates: map.get(maps.$units, states);
		}

		@include breakpointLoop($bp) using ($breakpointLabel) {
			@include pseudoStateModifierLoop($pseudoStates) using
				($stateClass, $stateLabelModifier, $pseudoLabelModifier) {
				@include directionModifierLoop($dir, $base) using
					($labelDirectionMod, $propertyDirectionMap) {
					@include propertyValueLoop(
              $base,
							map.get($map, unit),
							$unitLoopMode,
              $cssVar
						)
						using ($unitLabel, $propertyValue, $luminance) {
						// Error check if there is no base or labelDirectionMod and $unitLabel is a number skip or $unitLabel starts with the letter 'n'
						@if (
							$base ==
								"" and
								$labelDirectionMod ==
								"" and
								(
									helpers.is-number($unitLabel) or
										helpers.is-negativeUnitLabel($unitLabel)
								)
						) {
							@if (global.$debug) {
								@debug (
									"skip this unit because it would produce an improper class name"+
										"." + $base + $labelDirectionMod + $separator +
										$unitLabel
								);
							}
						} @else {
							@if ($base == "" and $labelDirectionMod != "") {
								$separator: "_";
							}
							#{
								$stateClass
								+ "."
								+ $stateLabelModifier
								+ $base
								+ $labelDirectionMod
								+ $separator
								+ $unitLabel
								+ $breakpointLabel
								+ $pseudoLabelModifier
								+ $postCSSSelector
								} {
								@each $prop in map.get($map, property) {
									@if (
										type-of($propertyDirectionMap) == "map"
									) {
										$prop-post: "";
										@if ($prop == "border-radius") {
											$prop: "border";
											$prop-post: "-radius";
										}
										@if ($prop == "border-width") {
											$prop: "border";
											$prop-post: "-width";
										}
										@if ($prop == "gap") {
											$prop: "";
											$prop-post: "-gap";
										}
										@include propertyDirectionMapLoop(
												$propertyDirectionMap,
												$type
											)
											using ($propertyDirection) {
											@if (
												$prop-post ==
													"-gap" and
													$propertyDirection ==
													"-row"
											) {
												$propertyDirection: "row";
											}
											@if (
												$prop-post ==
													"-gap" and
													$propertyDirection ==
													"-column"
											) {
												$propertyDirection: "column";
											}
											#{ $prop + $propertyDirection + $prop-post }: #{$propertyValue};
										}
									} @else {
										#{ $prop }: #{$propertyValue};
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

// Each CSS Utility Class
// If it is responsive. If it is loop through breakpoints
// If it has pseudo states. If it is loop through states
// If it has direction modifiers. If it is loop through directions.
// If color loop through color loop
// else loop through units
// End loops
// End Each

.ul_none {
	@extend .m_0 !optional;
	@extend .p_0 !optional;
}

@debug ("build complete");
